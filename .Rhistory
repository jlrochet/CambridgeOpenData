}
x <- matrix(1:4, 2, 2)
x
solve(x)
xinv <- solve(x)
x %*% xinv
identity2x2 <- x %*% xinv
identity2x2
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message ("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemtx <- makeCacheMatrix(x)
cacheSolve(cachemtx)
x %*% cachemtx
x %*% cacheSolve(cachemtx)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
mtx <- NULL
#        set <- function(y) {
#                x <<- y
#                mtx <<- NULL
#        }
get <- function() x
setsolve <- function(solve) mtx <<- solve
getsolve <- function() mtx
list (get = get, setsolve = setsolve, getsolve = getsolve)
}
x <- matrix(1:4, 2, 2)
xccache <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
mtx <- x$getsolve()
if(!is.null(mtx)) {
message ("retrieving cached data")
return(mtx)
}
data <- x$get()
mtx <- solve(data, ...)
x$setsolve(mtx)
mtx
}
cacheSolve(xccache)
solution <- cacheSolve(xccache)
solution
## Created by jlrochet on 6-8-2016
## This code closely follows Prof. Peng's example on Coursera
## These two functions work together to solve for the inverse of a matrix
## makeCacheMatrix stores the matrix information in a list for caching
## I eliminated the "set" function from the example code because it doesn't seem
## to do anything in either function...
makeCacheMatrix <- function(x = matrix()) {
mtx <- NULL
get <- function() x
setsolve <- function(solve) mtx <<- solve
getsolve <- function() mtx
list (get = get, setsolve = setsolve, getsolve = getsolve)
}
## cacheSolve returns the cached inverse matrix or calculates
## the inverse matrix absent a cached version
cacheSolve <- function(x, ...) {
mtx <- x$getsolve()
if(!is.null(mtx)) {
message ("retrieving cached data...")
return(mtx)
}
data <- x$get()
mtx <- solve(data, ...)
x$setsolve(mtx)
mtx
}
x <- matrix(1:9, 3, 3)
xinv <- solve(x)
x <- matrix(9:1, 3, 3)
xinv <- solve(x)
x <- matrix(1:16, 4, 4)
xinv <- solve(x)
x <- matrix(c(3,5,8,3,2,7,3,7,3), 3, 3)
xinv <- solve(x)
identitymtx<- x %*% xinv
identitymtx
round(identitymtx)
makeCacheMatrix(x)
z <- makeCacheMatrix(x)
z
cacheSolve(z)
xinvfunc <- cacheSolve(z)
x %*% xinvfunc
identity2 <- x %*% xinvfunc
round(identity2)
rm(list=ls())
install.packages("twitteR")
library(httr)
library(twitteR)
getTwitterOAuth(MaX6LNtLyEFSa1Qr8uCy4Sadj, FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey)
?setup_twitter_oauth
setup_twitter_oauth(MaX6LNtLyEFSa1Qr8uCy4Sadj, FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey)
setup_twitter_oauth("MaX6LNtLyEFSa1Qr8uCy4Sadj", "FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey")
setup_twitter_oauth("MaX6LNtLyEFSa1Qr8uCy4Sadj", "FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey", "47132476-sIlUkSsG3JK5OybjkSbytKjkiZj7MKrxSzQqBH7vv", "58z74lBMXNp8WhJ0n22WkTeQkHCL6npbFbUuJuobp8MJl")
searchTwitter('apartment hunting', geocode='40.7361,-73.9901,5mi',  n=5000, retryOnRateLimit=1)
searchTwitter('Suffolk County Sheriff Massachusetts', n=1)
searchTwitter('Suffolk County Sheriff Massachusetts', n=1, retryOnRateLimit = 1)
searchTwitter('Suffolk County Sheriff Massachusetts', n=1, retryOnRateLimit = 1)
searchTwitter('apartment hunting', geocode='40.7361,-73.9901,5mi',  n=30, retryOnRateLimit=1)
searchTwitter('Suffolk County Sheriff',  n=30, retryOnRateLimit=1)
sheriff_tweets <- searchTwitter('Suffolk County Sheriff',  n=30, retryOnRateLimit=1)
tweets <- data.frame(sheriff_tweets)
tweets <- data.frame(sheriff_tweets$screenName)
sheriff_tweets$screenName
sheriff_tweets
getCreated(sheriff_tweets)
sheriff_tweets[1]
sheriff_tweets[1][1]
sheriff_tweets[1][1][1]
rm(list=ls())
---
install.packages("knittr-jekyll")
install.packages("knitr-jekyll")
head(diamonds)
head(iris)
library(dplyr)
head(iris)
dfIris <- filter(iris, Sepal.Width > 3.0)
Iris <- iris
head(dfIris)
type(iris)
str(iris)
dfIris2 <- select(dfIris, Sepal.Length)
head(dfIris2)
dfIris <- mutate(dfIris, ratio = Sepal.Length/Sepal.Width)
head(dfIris)
dfIris <- arrange(dfIris, desc(ratio))
head(dfIris)
print(dfIris)
summarise(dfIris, mean(Petal.Length))
mean(dfIris$Petal.Length)
mtcars
clearPushBack()
clear(rm=list())
rm(list=ls())
mtcars
musclecars <- mtcars %>% filter(cyl>5 AND hp > 100)
musclecars <- mtcars %>% filter(cyl>5 && hp > 100)
View(musclecars)
str(mtcars)
rm(musclecars)
musclecars <- mtcars %>% filter(cyl>5)
rm(musclecars)
musclecars <- mtcars %>% filter(hp > 150) %>% select(-gear, -carb) %>% arrange(hp)
str(musclecars)
print(musclecars)
str(mtcars)
mtcars
musclecars <- mtcars
musclecars
arrange(musclecars, hp)
musclecars
musclecars <- arrange(musclecars, hp)
musclecars
rm(musclecars)
rownames(mtcars)
musclecars <- mtcars
musclecars
musclecars <- mutate(mtcars, name = rownames(mtcars))
musclecars
musclecars
mtcars
library(ggplot2)
mtcars %>% ggplot(aes(x=mpg, y=cyl)) + geom_boxplot()
mtcars %>% ggplot(aes(x=cyl, y=mpg)) + geom_boxplot()
rm(list=ls())
install.packages(highcharter)
install.packages("highcharter")
library(highcharter)
library(highcharter)
install.packages("tibble")
install.packages("tibble")
library(highcharter)
diamonds
mtcars
mpg
library(ggplot2)
hchart(mtcars, "scatter", x = hp, y = mpg, group = cyl)
unemployment
data("unemployment")
?gc
rm(list=ls())
gc()
hchart(mtcars$cyl, colorByPoint = TRUE, name = cylinder)
hchart(mtcars$cyl, colorByPoint = TRUE, name = "cylinder")
hchart(mtcars$cyl, name = "cylinder")
library(unemployment)
data("sunspots")
rm(sunspots)
data("unemployment")
str(unemployment)
View(unemployment)
View(unemployment)
rm(un)
rm(unemployment)
data("citytemp")
str(citytemp)
?hchart
methods(hchart)
View(citytemp)
hchart(citytemp, "line", x = month, series = c(tokyo))
hchart(citytemp, "line", x = month, series = c(tokyo, new_york))
hchart(citytemp, "line", x = month, series = tokyo)
hchart(citytemp, "line", x = month)
hchart(citytemp, "line")
hchart(citytemp$tokyo, "line")
str(economics_long)
data("economics")
data("economics_long")
View(economics)
View(economics_long)
library(dplyr)
econ2 <- filter(economics_long, variable == "pop")
View(econ2)
hchart(econ2, "line", x = date, y = value01, name = "Population")
hchart(econ2, "line", x = date, y = value01, name = "Population", title = "Population")
hchart(econ2, "line", x = date, y = value, name = "Population", title = "Population")
?hchart
library(ggplot2)
mpg
str(mpg)
ggplot(mpg, aes(displ, hwy, color = class))
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
?purrr
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
rm(list = ls())
library(tidyverse)
data(mpg)
rm(mpg)
mpg
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = class, shape = trans)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = class, shape = cyl)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = class, shape = group(cyl))) + geom_point()
?mpg
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = "blue")) + geom_point()
ggplot(mpg, aes(displ, hwy), color = "blue") + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point(color = "blue")
ggplot(mpg) + geom_point(aes(displ, hwy), color = "blue")
ggplot(mpg) + geom_point(aes(displ, hwy), color = "green")
ggplot(mpg) + geom_point(aes(displ, hwy, color = class))
ggplot(mpg) + geom_point(aes(displ, hwy, color = class), shape = 16)
ggplot(mpg) + geom_point(aes(displ, hwy, color = class), shape = 17)
ggplot(mpg) + geom_point(aes(displ, hwy, color = class), shape = 5)
ggplot(mpg) + geom_point(aes(displ, hwy, color = class), shape = 18)
ggplot(mpg) + geom_point(aes(displ, hwy)) + facet_wrap(~class)
ggplot(mpg) + geom_point(aes(displ, hwy)) + facet_wrap(class)
ggplot(mpg) + geom_point(aes(displ, hwy)) + facet_wrap(~class)
ggplot(mpg) + geom_smooth(aes(displ, hwy))
ggplot(mpg) + geom_smooth(aes(displ, hwy), color = "green")
ggplot(mpg) + geom_smooth(aes(displ, hwy), color = "black")
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = cyl))
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = trans))
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = class))
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = drv)) + geom_point(aes(displ, why, color = drv))
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = drv)) + geom_point(aes(displ, hwy, color = drv))
ggplot(mpg) + geom_smooth(aes(displ, hwy, linetype = drv, color = drv)) + geom_point(aes(displ, hwy, color = drv))
ggplot(diamonds) + geom_bar(aes(cut))
ggplot(diamonds) + stat_sum(aes(cut, depth))
ggplot(diamonds) + stat_summary(aes(cut, depth))
ggplot(diamonds) + geom_bar(aes(cut), color = cut)
ggplot(diamonds) + geom_bar(aes(cut, color = cut))
ggplot(diamonds) + geom_bar(aes(cut, fill = cut))
ggplot(diamonds) + geom_bar(aes(cut, fill = clarity))
ggplot(mpg) + geom_jitter()
ggplot(mpg) + geom_jitter(aes(displ, hwy))
?geom_jitter
ggplot(diamonds) + geom_boxplot(aes(cut))
ggplot(diamonds) + geom_boxplot(aes(cut, depth))
ggplot(diamonds) + geom_bar(aes(cut, fill = cut)) + coord_polar()
license()
install.packages(fivethirtyeight)
install.packages("fivethirtyeight")
library(c(dplyr, ggplot2))
library(dplyr)
library(ggplot2)
library(knitr)
library(magrittr)
library(broom)
library(stringr)
library(fivethirtyeight)
library(ggthemes)
library(scales)
install.packages("ggthemes")
install.packages("ggthemes")
library(ggthemes)
options(scipen = 99)
data("bechdel")
library(fivethirtyeight)
data("bechdel")
library(dplyr)
library(ggplot2)
library(knitr)
library(magrittr)
library(broom)
library(stringr)
library(fivethirtyeight)
library(ggthemes)
library(scales)
View(bechdel)
bechdel90_13 <- bechdel %>% filter(between(year, 1990, 2013))
View(bechdel90_13)
bechdel90_13 %<>% mutate(int_only = intgross_2013 - domgross_2013, roi_total = intgross_2013 / budget_2013, roi_dom = domgross_2013 / budget_2013, roi_int = int_only / budget_2013)
bechdel90_13 %<>% mutate(generous = ifelse(test = clean_test %in% c("ok", "dubious"), yes = TRUE, no = FALSE))
ROI_by_binary <- bechdel90_13 %>% group_by(binary) %>% summarize(median_ROI = median(roi_total, na.rm))
ROI_by_binary <- bechdel90_13 %>% group_by(binary) %>% summarize(median_ROI = median(roi_total, na.rm = TRUE))
ROI_by_binary
median(roi_total, na.rm = TRUE)
median(bechdel90_13$roi_total, na.rm = TRUE)
ggplot(bechdel90_13, aes(budget)) + geom_histogram(color = "white", bins = 20)
ggplot(bechdel90_13, aes(budget)) + geom_histogram(color = "white", bins = 20) + labs(title = "Histogram", xlab = "x", ylab = "y")
ggplot(data = bechdel90_13, mapping = aes(x = budget_2013, y = intgross_2013)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
gross_vs_budget <- lm(log(intgross_2013) ~ log(budget_2013), data = bechdel90_13)
gross_vs_budget
tidy(gross_vs_budget)
passes_bechtel_rom <- bechdel90_13 %>%
filter(generous == TRUE) %>%
summarize(median_roi = median(roi_dom, na.rm = TRUE))
median_groups_dom <- bechdel90_13 %>%
filter(clean_test %in% c("men", "notalk", "nowomen")) %>%
group_by(clean_test) %>%
summarize(median_roi = median(roi_dom, na.rm = TRUE))
pass_bech_rom <- data_frame(clean_test = "pass",
median_roi = passes_bechtel_rom$median_roi)
med_groups_dom_full <- bind_rows(pass_bech_rom, median_groups_dom) %>%
mutate(group = "U.S. and Canada")
passes_bechtel_int <- bechdel90_13 %>%
filter(generous == TRUE) %>%
summarize(median_roi = median(roi_int, na.rm = TRUE))
median_groups_int <- bechdel90_13 %>%
filter(clean_test %in% c("men", "notalk", "nowomen")) %>%
group_by(clean_test) %>%
summarize(median_roi = median(roi_int, na.rm = TRUE))
pass_bech_int <- data_frame(clean_test = "pass",
median_roi = passes_bechtel_int$median_roi)
med_groups_int_full <- bind_rows(pass_bech_int, median_groups_int) %>%
mutate(group = "International")
med_groups <- bind_rows(med_groups_dom_full, med_groups_int_full) %>%
mutate(clean_test = str_replace_all(clean_test,
"pass",
"Passes Bechdel Test"),
clean_test = str_replace_all(clean_test, "men",
"Women only talk about men"),
clean_test = str_replace_all(clean_test, "notalk",
"Women don't talk to each other"),
clean_test = str_replace_all(clean_test, "nowoWomen only talk about men",
"Fewer than two women"))
med_groups %<>% mutate(clean_test = factor(clean_test,
levels = c("Fewer than two women",
"Women don't talk to each other",
"Women only talk about men",
"Passes Bechdel Test"))) %>%
mutate(group = factor(group, levels = c("U.S. and Canada", "International"))) %>%
mutate(median_roi_dol = dollar(median_roi))
ggplot(data = med_groups, mapping = aes(x = clean_test, y = median_roi,
fill = group)) +
geom_bar(stat = "identity") +
facet_wrap(~ group) +
coord_flip() +
labs(title = "Dollars Earned for Every Dollar Spent", subtitle = "2013 dollars") +
scale_fill_fivethirtyeight() +
theme_fivethirtyeight()
## Created by Jean-Louis Rochet on 2-9-2017
## Analysis of Cambridge PD geocoded crash data involving pedestrians (2010-14 only)
# Load packages
library(tidyverse)
library(lubridate)
library(magrittr)
# Set working directory
setwd("/Users/JLR/Documents/GitHub Repos/Cambridge Open Data")
# Read csv
crashes <- read_csv("Cambridge PD Geocoded Crashes 2010 - 2014.csv")
# Transform date time column with lubridate
crashes$`Date Time` <- mdy_hm(crashes$`Date Time`, tz = "America/New_York")
# Reformat with dyplyr, tidyr?
# Summary statistics and charts
iris
View(crashes)
crashes %>% rename(crash_id = `Crash Number`,
datetime = `Date Time`) -> crashes
crashes %>% rename(crash_id = `Crash Number`,
datetime = `Date Time`) -> crashes
# Rename columns
crashes %>% rename(crash_id = `Crash Number`,
date_time = `Date Time`,
day_of_week = `Day Of Week`,
object_1 = `Object 1`,
object_2 = `Object 2`,
street_number = `Street Number`,
street_name = `Steet Name`,
cross_street = `Cross Street`,
location = Location,
latitude = Latitude,
longitude = Longitude) -> crashes
View(crashes)
## Created by Jean-Louis Rochet on 2-9-2017
## Analysis of Cambridge PD geocoded crash data involving pedestrians (2010-14 only)
# Load packages
library(tidyverse)
library(lubridate)
library(magrittr)
# Set working directory
setwd("/Users/JLR/Documents/GitHub Repos/Cambridge Open Data")
# Read csv
crashes <- read_csv("Cambridge PD Geocoded Crashes 2010 - 2014.csv")
# Transform date time column with lubridate
crashes$`Date Time` <- mdy_hm(crashes$`Date Time`, tz = "America/New_York")
# Rename columns
crashes %>% rename(crash_id = `Crash Number`,
date_time = `Date Time`,
day_of_week = `Day Of Week`,
object_1 = `Object 1`,
object_2 = `Object 2`,
street_number = `Street Number`,
street_name = `Steet Name`,
cross_street = `Cross Street`,
location = Location,
latitude = Latitude,
longitude = Longitude) -> crashes
# Summary statistics and charts
View(crashes)
## Created by Jean-Louis Rochet on 2-9-2017
## Analysis of Cambridge PD geocoded crash data involving pedestrians (2010-14 only)
# Load packages
library(tidyverse)
library(lubridate)
library(magrittr)
# Set working directory
setwd("/Users/JLR/Documents/GitHub Repos/Cambridge Open Data")
# Read csv
crashes <- read_csv("Cambridge PD Geocoded Crashes 2010 - 2014.csv")
# Transform date time column with lubridate
crashes$`Date Time` <- mdy_hm(crashes$`Date Time`, tz = "America/New_York")
# Rename columns
crashes %>% select(crash_id = `Crash Number`,
date_time = `Date Time`,
day_of_week = `Day Of Week`,
object_1 = `Object 1`,
object_2 = `Object 2`,
street_number = `Street Number`,
street_name = `Steet Name`,
cross_street = `Cross Street`,
location = Location,
latitude = Latitude,
longitude = Longitude) -> crashes
# Summary statistics and charts
View(crashes)
crashes <- mutate(crashes, date = ymd(date_time), time = hm(date_time))
View(crashes)
?lubridate
now()
today()
second(date_time$1)
second(crashes$date_time$1)
second(crashes$date_time)
minute(crashes$date_time)
wday(crashes, date_time)
wday(crashes$date_time)
weekdays(crashes$date_time)
qplot(crash_id, data = crashes)
qplot(day_of_week, data = crashes)
qplot(crashes$day_of_week, geom="histogram") # days of the week are out of order
qplot(crashes$day_of_week) # days of the week are out of order
crashes <- mutate(weekday = weekdays(crashes$date_time))
crashes <- mutate(crashes, weekday = weekdays(crashes$date_time))
View(crashes)
crashes <- select(crashes, -day_of_week)
View(crashes)
crashes <- select(crashes, -day, -week)
crashes <- select(crashes, c(-day, -week))
crashes <- select(crashes, -day)
crashes <- select(crashes, -date, -time)
qplot(crashes$weekday) # days of the week are out of order
chisq.test(crashes$weekday)
chisq.test(crashes$weekday, crashes$crash_id)
?chisq.test
tbl = table(crashes$weekday, crashes$crash_id)
tbl
tbl = table(crashes$weekday)
tbl
chisq.test(tbl)
qplot(crashes$weekday) # days of the week are out of order
qplot(crashes$object_1)
View(crashes)
crashes <- mutate(crashes, hour = hour(date_time))
View(crashes)
qplot(crashes$hour)
qplot(crashes$hour, geom = "smooth")
qplot(crashes$hour, count(crashes) geom = "smooth")
qplot(crashes$hour, count(crashes), geom = "smooth")
qplot(crashes$hour, count(crashes$crash_id), geom = "smooth")
qplot(crashes$hour) # distribution of crashes by time of day
tbl2 <- table(crashes$hour)
tbl2
hour_tbl <- table(crashes$hour)
chisq.test(hour_tbl)
